{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Git Helper Utils","text":"<p>Collection of Python convenience utility scripts to facilitate git-related tasks.</p>"},{"location":"#commands","title":"Commands","text":"<p>The following exported console scripts are available:</p> <ul> <li>create-git-branch</li> <li>create-git-commit-file</li> </ul>"},{"location":"#references","title":"References","text":"<ul> <li>GitHub</li> <li>PYPI</li> </ul>"},{"location":"CHANGELOG/","title":"Change Log","text":""},{"location":"CHANGELOG/#v050-2024-01-22","title":"v0.5.0 - 2024-01-22","text":"<p>ADDS: - Adds use of mkdocs for documentation.</p>"},{"location":"CHANGELOG/#v040-2024-01-20","title":"v0.4.0 - 2024-01-20","text":"<p>CHANGES: - replaces git_helper_utils/make_executables_and_aliases.py with git_helper_utils/make_shell_scripts_and_aliases.py</p>"},{"location":"CHANGELOG/#v020-2023-12-31","title":"v0.2.0 - 2023-12-31","text":"<p>ADDS: - create-git-commit-file: support for creating a git commit comment file that conforms to conventional commits</p>"},{"location":"INSTALL/","title":"INSTALL","text":""},{"location":"INSTALL/#clone-project","title":"Clone project","text":"<p>You can <code>git clone</code> this project.</p> <pre><code>git clone https://github.com/jai-python3/git-helper-utils.git\ncd git-helper-utils\n</code></pre>"},{"location":"INSTALL/#local-pip-install","title":"Local pip install","text":"<p>You can optionally establish a Python virtual environment. Then you can run the <code>setup.py</code> script to build to project and then run <code>pip install</code> to install in your local Python virtual environment.</p> <pre><code>virtualenv -p python3 venv\nsource venv/bin/activate\npython setup.py sdist\npip install .\n</code></pre>"},{"location":"INSTALL/#uninstall","title":"Uninstall","text":"<p>You can uninstall like this:</p> <pre><code>source venv/bin/activate\npip uninstall git-helper-utils\nmake clean\n</code></pre>"},{"location":"INSTALL/#developers","title":"Developers","text":"<p>If you modify the code in this package in your local virtual environment:</p> <pre><code>pip uninstall git-helper-utils\nmake clean\npython setup.py sdist\npip install .\n</code></pre>"},{"location":"INSTALL/#publish-to-pypi","title":"Publish to PYPI","text":"<p>You want can publish the code in this package to the PYPI repository.</p>"},{"location":"INSTALL/#install-twine-and-setuptools","title":"Install twine and setuptools","text":"<p>Install <code>twine</code> and <code>setuptools</code>.</p> <pre><code>pip install twine setuptools\n</code></pre>"},{"location":"INSTALL/#build-the-distribution-package","title":"Build the Distribution Package","text":"<pre><code>python setup.py sdist bdist_wheel\n</code></pre>"},{"location":"INSTALL/#configure-your-pypirc","title":"Configure your ~/.pypirc:","text":"<pre><code>[pypi]\n  username = __token__\n  password = pypi-YOUR-TOKEN\n</code></pre>"},{"location":"INSTALL/#upload-your-package-to-pypi","title":"Upload Your Package to PyPI","text":"<pre><code>twine upload dist/*\n</code></pre>"},{"location":"INSTALL/#install-from-pypi","title":"Install from PYPI","text":"<p>Now you can install your package in your Python virtual environment</p> <pre><code>pip install git-helper-utils\n</code></pre>"},{"location":"TODO/","title":"TODO","text":"<ul> <li>create-git-commit-file</li> <li>class diagram</li> </ul>"},{"location":"create_git_branch/","title":"Create Git Branch module","text":"<p>Create a git branch.</p>"},{"location":"create_git_branch/#git_helper_utils.create_git_branch.main","title":"<code>main(desc, jira_id, logfile, outdir, source_branch, type, verbose)</code>","text":"<p>Create a git branch.</p> <p>Parameters:</p> Name Type Description Default <code>desc</code> <code>str</code> <p>A description to apply during the creation of the branch.</p> required <code>jira_id</code> <code>Optional[str]</code> <p>The Jira ticket identifier.</p> required <code>logfile</code> <code>Optional[str]</code> <p>The log file.</p> required <code>outdir</code> <code>Optional[str]</code> <p>The output directory.</p> required <code>source_branch</code> <code>str</code> <p>The source branch to establish the new branch from.</p> required <code>type</code> <code>str</code> <p>The type of branch to establish.</p> required <code>verbose</code> <code>Optional[bool]</code> <p>Will print more info to STDOUT.</p> required Source code in <code>git_helper_utils/create_git_branch.py</code> <pre><code>@click.command()\n@click.option('--desc', help=\"Required: A description to apply during the creation of the branch\")\n@click.option('--jira_id', help=\"Optional: The Jira ticket identifier\")\n@click.option('--logfile', help=\"Optional: The log file\")\n@click.option('--outdir', help=f\"Optional: The default is the current working directory - default is '{DEFAULT_OUTDIR}'\")\n@click.option('--source_branch', help=f\"Optional: The source branch to establish the new branch from - default is '{DEFAULT_SOURCE_BRANCH}'\")\n@click.option('--type', type=click.Choice(DEFAULT_VALID_TYPES), help=\"Required: The type of branch to establish\")\n@click.option('--verbose', is_flag=True, help=f\"Will print more info to STDOUT - default is '{DEFAULT_VERBOSE}'\", callback=validate_verbose)\ndef main(desc: str, jira_id: Optional[str], logfile: Optional[str], outdir: Optional[str], source_branch: str, type: str, verbose: Optional[bool]):\n    \"\"\"Create a git branch.\n\n    Args:\n        desc (str): A description to apply during the creation of the branch.\n        jira_id (Optional[str]): The Jira ticket identifier.\n        logfile (Optional[str]): The log file.\n        outdir (Optional[str]): The output directory.\n        source_branch (str): The source branch to establish the new branch from.\n        type (str): The type of branch to establish.\n        verbose (Optional[bool]): Will print more info to STDOUT.\n    \"\"\"\n    error_ctr = 0\n\n    if desc is None:\n        desc = click.prompt(\"Please enter a description for the branch\", type=str)\n        if desc is None or desc == \"\":\n            print_red(\"--desc was not specified\")\n            error_ctr += 1\n\n    while type is None or type not in DEFAULT_VALID_TYPES:\n        type = click.prompt(f\"Please enter the type of branch to establish (valid options: {DEFAULT_VALID_TYPES})\", type=str)\n\n    if error_ctr &gt; 0:\n        print_red(\"Required command-line arguments were not provided\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n\n    if source_branch is None:\n        source_branch = input(f\"Please provide the source branch (default is '{DEFAULT_SOURCE_BRANCH}'): \")\n        if source_branch is None or source_branch == \"\":\n            source_branch = DEFAULT_SOURCE_BRANCH\n        source_branch = source_branch.strip()\n\n    if jira_id is None:\n        jira_id = input(\"Please enter the Jira ticket identifier or press ENTER to skip: \")\n        if jira_id is None or jira_id == \"\":\n            jira_id = None\n        else:\n            jira_id = jira_id.strip()\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    if verbose is None:\n        verbose = DEFAULT_VERBOSE\n        print_yellow(f\"--verbose was not specified and therefore was set to '{verbose}'\")\n\n    logging.basicConfig(\n        filename=logfile,\n        format=DEFAULT_LOGGING_FORMAT,\n        level=DEFAULT_LOGGING_LEVEL,\n    )\n\n    timestamp = datetime.today().strftime('%Y-%m-%d-%H%M%S')\n\n    new_branch = None\n\n    if jira_id is None:\n        new_branch = f\"{type}/from-{source_branch}-on-{timestamp}-for-{desc.lower().replace(' ', '-')}\"\n    else:\n        new_branch = f\"{type}/{jira_id}-from-{source_branch}-on-{timestamp}-for-{desc.lower().replace(' ', '-')}\"\n\n    print(f\"New branch: {new_branch}\")\n\n    execute_cmd(f\"git checkout -b {new_branch}\")\n\n    if verbose:\n        console.print(f\"The log file is '{logfile}'\")\n        print_green(f\"Execution of '{os.path.abspath(__file__)}' completed\")\n    sys.exit(0)\n</code></pre>"},{"location":"create_git_branch/#git_helper_utils.create_git_branch.validate_verbose","title":"<code>validate_verbose(ctx, param, value)</code>","text":"<p>Validate the validate option.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The click context.</p> required <code>param</code> <code>str</code> <p>The parameter.</p> required <code>value</code> <code>bool</code> <p>The value.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>The value.</p> Source code in <code>git_helper_utils/create_git_branch.py</code> <pre><code>def validate_verbose(ctx, param, value):\n    \"\"\"Validate the validate option.\n\n    Args:\n        ctx (Context): The click context.\n        param (str): The parameter.\n        value (bool): The value.\n\n    Returns:\n        bool: The value.\n    \"\"\"\n\n    if value is None:\n        click.secho(\"--verbose was not specified and therefore was set to 'True'\", fg='yellow')\n        return DEFAULT_VERBOSE\n    return value\n</code></pre>"},{"location":"create_git_commit_file/","title":"Create Git Commit File module","text":"<p>Create a git commit file.</p>"},{"location":"create_git_commit_file/#git_helper_utils.create_git_commit_file.get_desc_from_user","title":"<code>get_desc_from_user()</code>","text":"<p>Prompt the user for a description.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The description.</p> Source code in <code>git_helper_utils/create_git_commit_file.py</code> <pre><code>def get_desc_from_user() -&gt; str:\n    \"\"\"Prompt the user for a description.\n\n    Returns:\n        str: The description.\n    \"\"\"\n    desc = input(\"Please provide a description for the commit (type 'done' when finished)\\n\")\n    return desc\n</code></pre>"},{"location":"create_git_commit_file/#git_helper_utils.create_git_commit_file.main","title":"<code>main(comment, issue_id, logfile, outdir, outfile, scope, commit_type, verbose)</code>","text":"<p>Create a git commit file.</p> <p>Parameters:</p> Name Type Description Default <code>comment</code> <code>Optional[str]</code> <p>A one line comment.</p> required <code>issue_id</code> <code>Optional[str]</code> <p>The issue identifier.</p> required <code>logfile</code> <code>Optional[str]</code> <p>The log file.</p> required <code>outdir</code> <code>Optional[str]</code> <p>The output directory.</p> required <code>outfile</code> <code>Optional[str]</code> <p>The output commit comment file.</p> required <code>scope</code> <code>Optional[str]</code> <p>Describes the module, component, or section of the project that is affected by the commit.</p> required <code>commit_type</code> <code>Optional[str]</code> <p>Describes the purpose of the commit.</p> required <code>verbose</code> <code>Optional[bool]</code> <p>Will print more info to STDOUT.</p> required Source code in <code>git_helper_utils/create_git_commit_file.py</code> <pre><code>@click.command()\n@click.option('--comment', help=\"Optional: A one line comment.\")\n@click.option('--issue_id', help=\"Optional: The issue identifier.\")\n@click.option('--logfile', help=\"Optional: The log file.\")\n@click.option('--outdir', help=f\"Optional: The default is the current working directory - default is '{DEFAULT_OUTDIR}'.\")\n@click.option('--outfile', help=\"Optional: The output commit comment file.\")\n@click.option('--scope', help=\"Optional: Describes the module, component, or section of the project that is affected by the commit.\")\n@click.option('--commit_type', type=click.Choice(DEFAULT_COMMIT_TYPES), help=\"Optional: Describes the purpose of the commit.\")\n@click.option('--verbose', is_flag=True, help=f\"Will print more info to STDOUT - default is '{DEFAULT_VERBOSE}'.\", callback=validate_verbose)\ndef main(comment: Optional[str], issue_id: Optional[str], logfile: Optional[str], outdir: Optional[str], outfile: Optional[str], scope: Optional[str], commit_type: Optional[str], verbose: Optional[bool]):\n    \"\"\"Create a git commit file.\n\n    Args:\n        comment (Optional[str]): A one line comment.\n        issue_id (Optional[str]): The issue identifier.\n        logfile (Optional[str]): The log file.\n        outdir (Optional[str]): The output directory.\n        outfile (Optional[str]): The output commit comment file.\n        scope (Optional[str]): Describes the module, component, or section of the project that is affected by the commit.\n        commit_type (Optional[str]): Describes the purpose of the commit.\n        verbose (Optional[bool]): Will print more info to STDOUT.\n    \"\"\"\n    error_ctr = 0\n\n    if error_ctr &gt; 0:\n        print_red(\"Required command-line arguments were not provided\")\n        click.echo(click.get_current_context().get_help())\n        sys.exit(1)\n\n    if outdir is None:\n        outdir = DEFAULT_OUTDIR\n        print_yellow(f\"--outdir was not specified and therefore was set to '{outdir}'\")\n\n    if not os.path.exists(outdir):\n        pathlib.Path(outdir).mkdir(parents=True, exist_ok=True)\n        print_yellow(f\"Created output directory '{outdir}'\")\n\n    if logfile is None:\n        logfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.log'\n        )\n        print_yellow(f\"--logfile was not specified and therefore was set to '{logfile}'\")\n\n    if outfile is None:\n        outfile = os.path.join(\n            outdir,\n            os.path.splitext(os.path.basename(__file__))[0] + '.txt'\n        )\n        print_yellow(f\"--outfile was not specified and therefore was set to '{outfile}'\")\n\n    if verbose is None:\n        verbose = DEFAULT_VERBOSE\n        print_yellow(f\"--verbose was not specified and therefore was set to '{verbose}'\")\n\n\n    while commit_type is None or commit_type == \"\" or commit_type.lower().strip() not in DEFAULT_COMMIT_TYPES:\n        print(\"\\n\")\n        for commit_type in DEFAULT_COMMIT_TYPES:\n            console.print(f\"[bold blue]{commit_type}[/] - {commit_type_lookup[commit_type]}\")\n        commit_type = click.prompt(\"Please enter the type of commit\", type=str)\n\n    if scope is None or scope == \"\":\n        scope = input(\"Please enter the scope of the commit [just press Enter if none]: \")\n        if scope is None or scope == \"\":\n            scope = None\n\n    while comment is None or comment == \"\":\n        comment = click.prompt(\"Please enter a one-line comment\", type=str)\n\n    if issue_id is None or issue_id == \"\":\n        issue_id = click.prompt(\"Please enter the issue identifier [Enter if none]\", type=str)\n        if issue_id is None or issue_id == \"\":\n            issue_id = None\n        else:\n            issue_id = issue_id.strip()\n    else:\n        issue_id = issue_id.strip()\n\n    logging.basicConfig(\n        filename=logfile,\n        format=DEFAULT_LOGGING_FORMAT,\n        level=DEFAULT_LOGGING_LEVEL,\n    )\n\n    ans = input(\"Do you want to provide more details? [Y/n]:\")\n    desc = None\n    if ans is None or ans == \"\" or ans.lower() == \"y\":\n        desc = get_desc_from_user()\n\n    outline = None\n    if scope is not None:\n        outline = f\"{commit_type}({scope}): {comment}\"\n    else:\n        outline = f\"{commit_type}: {comment}\"\n\n    with open(outfile, 'w') as of:\n\n        of.write(f\"{outline}\\n\\n\")\n        if desc is not None and desc != \"\":\n            of.write(f\"{desc}\\n\\n\")\n        if issue_id is not None and issue_id != \"\":\n            of.write(f\"{issue_id}\\n\")\n\n    logging.info(f\"Wrote commit comment file '{outfile}'\")\n\n\n    if verbose:\n        console.print(f\"\\nWrote commit comment file '{outfile}'\")\n        console.print(f\"\\nThe log file is '{logfile}'\")\n        print_green(f\"Execution of '{os.path.abspath(__file__)}' completed\")\n    sys.exit(0)\n</code></pre>"},{"location":"create_git_commit_file/#git_helper_utils.create_git_commit_file.validate_verbose","title":"<code>validate_verbose(ctx, param, value)</code>","text":"<p>Validate the validate option.</p> <p>Parameters:</p> Name Type Description Default <code>ctx</code> <code>Context</code> <p>The click context.</p> required <code>param</code> <code>str</code> <p>The parameter.</p> required <code>value</code> <code>bool</code> <p>The value.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>The value.</p> Source code in <code>git_helper_utils/create_git_commit_file.py</code> <pre><code>def validate_verbose(ctx, param, value):\n    \"\"\"Validate the validate option.\n\n    Args:\n        ctx (Context): The click context.\n        param (str): The parameter.\n        value (bool): The value.\n\n    Returns:\n        bool: The value.\n    \"\"\"\n\n    if value is None:\n        click.secho(\"--verbose was not specified and therefore was set to 'True'\", fg='yellow')\n        return DEFAULT_VERBOSE\n    return value\n</code></pre>"}]}